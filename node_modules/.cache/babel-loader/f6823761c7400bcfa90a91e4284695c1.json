{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\App Corp\\\\Desktop\\\\CinemaApp\\\\src\\\\Components\\\\SearchComponent\\\\SearchComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Container, Spinner, Form, Button } from \"react-bootstrap\";\nimport { sendAskMidoQuestion, changeQuestionVal } from \"./../../redux/Search/Search.Action\";\nimport { NavLink, Link, useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchComponent(props) {\n  _s();\n\n  useEffect(() => {\n    props.sendAskMidoQuestion(question);\n  }, []);\n  let history = useHistory();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      className: `d-block`,\n      onSubmit: e => history.push(`/search/${props.questionVal}`),\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0623\\u0643\\u062A\\u0628 \\u0633\\u0624\\u0627\\u0644\\u0643 \\u0647\\u0646\\u0627\",\n        type: \"search\",\n        className: \"border-radius-15 fs-sm p-3 w-75 m-auto\",\n        onChange: e => props.changeQuestionVal(e.target.value),\n        value: props.questionVal //   onSubmit={ history.push(`/search/${props.questionVal}`)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: `m-auto py-2 py-md-2 cust-primary-btn fs-md w-50 d-block border-radius-10`,\n      onClick: e => sendAskMidoQuestion(props.questionVal),\n      children: props.isSendingQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          as: \"span\",\n          animation: \"grow\",\n          size: \"sm\",\n          role: \"status\",\n          \"aria-hidden\": \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mr-1\",\n          children: \"\\u062C\\u0627\\u0631\\u064A \\u0627\\u0644\\u0627\\u0631\\u0633\\u0627\\u0644...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u0625\\u0631\\u0633\\u0644\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchComponent, \"w5qAa3Dg/z34AP8M1iGpSRntZ0w=\", false, function () {\n  return [useHistory];\n});\n\n_c = SearchComponent;\n\nconst mapStateToProps = state => ({\n  questionVal: state.askMidoForm.questionVal,\n  isSendingQuestion: state.askMidoForm.isSendingQuestion,\n  sendQuestionState: state.askMidoForm.sendQuestionState\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendAskMidoQuestion: question => dispatch(sendAskMidoQuestion(question)),\n  changeQuestionVal: newQuery => dispatch(changeQuestionVal(newQuery))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchComponent\");","map":{"version":3,"sources":["C:/Users/App Corp/Desktop/CinemaApp/src/Components/SearchComponent/SearchComponent.jsx"],"names":["React","useState","connect","Container","Spinner","Form","Button","sendAskMidoQuestion","changeQuestionVal","NavLink","Link","useHistory","SearchComponent","props","useEffect","question","history","e","push","questionVal","target","value","isSendingQuestion","mapStateToProps","state","askMidoForm","sendQuestionState","mapDispatchToProps","dispatch","newQuery"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,IAA7B,EAAmCC,MAAnC,QAAiD,iBAAjD;AACA,SACEC,mBADF,EAEEC,iBAFF,QAGO,oCAHP;AAIA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,UAAxB,QAA0C,kBAA1C;;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9BC,EAAAA,SAAS,CAAC,MAAM;AACdD,IAAAA,KAAK,CAACN,mBAAN,CAA0BQ,QAA1B;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAIC,OAAO,GAAGL,UAAU,EAAxB;AACA,sBACE;AAAA,4BACE,QAAC,IAAD,CAAM,KAAN;AACE,MAAA,SAAS,EAAG,SADd;AAEE,MAAA,QAAQ,EAAGM,CAAD,IAAOD,OAAO,CAACE,IAAR,CAAc,WAAUL,KAAK,CAACM,WAAY,EAA1C,CAFnB;AAAA,6BAIE;AACE,QAAA,WAAW,EAAC,4EADd;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,SAAS,EAAC,wCAHZ;AAIE,QAAA,QAAQ,EAAGF,CAAD,IAAOJ,KAAK,CAACL,iBAAN,CAAwBS,CAAC,CAACG,MAAF,CAASC,KAAjC,CAJnB;AAKE,QAAA,KAAK,EAAER,KAAK,CAACM,WALf,CAME;;AANF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,MAAD;AACE,MAAA,SAAS,EAAG,0EADd;AAEE,MAAA,OAAO,EAAGF,CAAD,IAAOV,mBAAmB,CAACM,KAAK,CAACM,WAAP,CAFrC;AAAA,gBAIGN,KAAK,CAACS,iBAAN,gBACC;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE,QAAC,OAAD;AACE,UAAA,EAAE,EAAC,MADL;AAEE,UAAA,SAAS,EAAC,MAFZ;AAGE,UAAA,IAAI,EAAC,IAHP;AAIE,UAAA,IAAI,EAAC,QAJP;AAKE,yBAAY;AALd;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBJ;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD;;GAzCQV,e;UAIOD,U;;;KAJPC,e;;AA2CT,MAAMW,eAAe,GAAIC,KAAD,KAAY;AAClCL,EAAAA,WAAW,EAAEK,KAAK,CAACC,WAAN,CAAkBN,WADG;AAElCG,EAAAA,iBAAiB,EAAEE,KAAK,CAACC,WAAN,CAAkBH,iBAFH;AAGlCI,EAAAA,iBAAiB,EAAEF,KAAK,CAACC,WAAN,CAAkBC;AAHH,CAAZ,CAAxB;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCrB,EAAAA,mBAAmB,EAAGQ,QAAD,IAAca,QAAQ,CAACrB,mBAAmB,CAACQ,QAAD,CAApB,CADH;AAExCP,EAAAA,iBAAiB,EAAGqB,QAAD,IAAcD,QAAQ,CAACpB,iBAAiB,CAACqB,QAAD,CAAlB;AAFD,CAAf,CAA3B;;AAKA,eAAe3B,OAAO,CAACqB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6Cf,eAA7C,CAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Container, Spinner, Form, Button } from \"react-bootstrap\";\r\nimport {\r\n  sendAskMidoQuestion,\r\n  changeQuestionVal,\r\n} from \"./../../redux/Search/Search.Action\";\r\nimport { NavLink, Link, useHistory } from \"react-router-dom\";\r\nfunction SearchComponent(props) {\r\n  useEffect(() => {\r\n    props.sendAskMidoQuestion(question);\r\n  }, []);\r\n  let history = useHistory();\r\n  return (\r\n    <div>\r\n      <Form.Group\r\n        className={`d-block`}\r\n        onSubmit={(e) => history.push(`/search/${props.questionVal}`)}\r\n      >\r\n        <input\r\n          placeholder=\"أكتب سؤالك هنا\"\r\n          type=\"search\"\r\n          className=\"border-radius-15 fs-sm p-3 w-75 m-auto\"\r\n          onChange={(e) => props.changeQuestionVal(e.target.value)}\r\n          value={props.questionVal}\r\n          //   onSubmit={ history.push(`/search/${props.questionVal}`)}\r\n        />\r\n      </Form.Group>\r\n      <Button\r\n        className={`m-auto py-2 py-md-2 cust-primary-btn fs-md w-50 d-block border-radius-10`}\r\n        onClick={(e) => sendAskMidoQuestion(props.questionVal)}\r\n      >\r\n        {props.isSendingQuestion ? (\r\n          <div className=\"text-center\">\r\n            <Spinner\r\n              as=\"span\"\r\n              animation=\"grow\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />\r\n            <span className=\"mr-1\">جاري الارسال...</span>\r\n          </div>\r\n        ) : (\r\n          <span>إرسل</span>\r\n        )}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  questionVal: state.askMidoForm.questionVal,\r\n  isSendingQuestion: state.askMidoForm.isSendingQuestion,\r\n  sendQuestionState: state.askMidoForm.sendQuestionState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  sendAskMidoQuestion: (question) => dispatch(sendAskMidoQuestion(question)),\r\n  changeQuestionVal: (newQuery) => dispatch(changeQuestionVal(newQuery)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchComponent);\r\n"]},"metadata":{},"sourceType":"module"}