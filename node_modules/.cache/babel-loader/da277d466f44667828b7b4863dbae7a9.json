{"ast":null,"code":"import axios from \"axios\";\nimport searchTypes from \"./Search.Types\";\nconst {\n  REACT_APP_BASE_URL,\n  REACT_APP_APIKEY\n} = process.env;\n\nconst changeSearchVal = newQuery => ({\n  type: searchTypes.CHANGE_SEARCH_VAL,\n  payload: newQuery\n});\n\nconst sendSearchStart = () => ({\n  type: searchTypes.SEND_SEARCH_START\n});\n\nconst sendSearchSuccess = info => ({\n  type: searchTypes.SEND_SEARCH_SUCCESS,\n  payload: info\n});\n\nconst clearSearch = () => ({\n  type: searchTypes.SEND_SEARCH_CLEAR\n});\n\nconst sendSearchFailure = error => ({\n  type: searchTypes.SEND_SEARCH_FAILED,\n  payload: error\n});\n\nconst sendsearch = question => {\n  return dispatch => {\n    dispatch(sendSearchStart());\n    axios({\n      method: \"get\",\n      url: `\n       ${REACT_APP_BASE_URL}search/movie?api_key=${REACT_APP_APIKEY}&query=${question}`\n    }).then(resp => {\n      dispatch(sendSearchSuccess(resp.data.message));\n\n      if (resp.data.status === 200) {\n        dispatch(sendSearchSuccess(resp.data.message));\n      } else {\n        dispatch(sendSearchFailure(resp.data));\n      }\n    }).catch(error => dispatch(sendSearchFailure(error.response.data.result)));\n  };\n};\n\nexport { sendsearch, changeSearchVal, clearSearch };","map":{"version":3,"sources":["C:/Users/App Corp/Desktop/CinemaApp/src/redux/Search/Search.Action.jsx"],"names":["axios","searchTypes","REACT_APP_BASE_URL","REACT_APP_APIKEY","process","env","changeSearchVal","newQuery","type","CHANGE_SEARCH_VAL","payload","sendSearchStart","SEND_SEARCH_START","sendSearchSuccess","info","SEND_SEARCH_SUCCESS","clearSearch","SEND_SEARCH_CLEAR","sendSearchFailure","error","SEND_SEARCH_FAILED","sendsearch","question","dispatch","method","url","then","resp","data","message","status","catch","response","result"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAM;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,IAA2CC,OAAO,CAACC,GAAzD;;AAEA,MAAMC,eAAe,GAAIC,QAAD,KAAe;AACrCC,EAAAA,IAAI,EAAEP,WAAW,CAACQ,iBADmB;AAErCC,EAAAA,OAAO,EAAEH;AAF4B,CAAf,CAAxB;;AAKA,MAAMI,eAAe,GAAG,OAAO;AAC7BH,EAAAA,IAAI,EAAEP,WAAW,CAACW;AADW,CAAP,CAAxB;;AAIA,MAAMC,iBAAiB,GAAIC,IAAD,KAAW;AACnCN,EAAAA,IAAI,EAAEP,WAAW,CAACc,mBADiB;AAEnCL,EAAAA,OAAO,EAAEI;AAF0B,CAAX,CAA1B;;AAIA,MAAME,WAAW,GAAG,OAAO;AACzBR,EAAAA,IAAI,EAAEP,WAAW,CAACgB;AADO,CAAP,CAApB;;AAGA,MAAMC,iBAAiB,GAAIC,KAAD,KAAY;AACpCX,EAAAA,IAAI,EAAEP,WAAW,CAACmB,kBADkB;AAEpCV,EAAAA,OAAO,EAAES;AAF2B,CAAZ,CAA1B;;AAKA,MAAME,UAAU,GAAIC,QAAD,IAAc;AAC/B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACZ,eAAe,EAAhB,CAAR;AACAX,IAAAA,KAAK,CAAC;AACJwB,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAG;AACZ,SAASvB,kBAAmB,wBAAuBC,gBAAiB,UAASmB,QAAS;AAH5E,KAAD,CAAL,CAKGI,IALH,CAKSC,IAAD,IAAU;AACdJ,MAAAA,QAAQ,CAACV,iBAAiB,CAACc,IAAI,CAACC,IAAL,CAAUC,OAAX,CAAlB,CAAR;;AACA,UAAIF,IAAI,CAACC,IAAL,CAAUE,MAAV,KAAqB,GAAzB,EAA8B;AAC5BP,QAAAA,QAAQ,CAACV,iBAAiB,CAACc,IAAI,CAACC,IAAL,CAAUC,OAAX,CAAlB,CAAR;AACD,OAFD,MAEO;AACLN,QAAAA,QAAQ,CAACL,iBAAiB,CAACS,IAAI,CAACC,IAAN,CAAlB,CAAR;AACD;AACF,KAZH,EAaGG,KAbH,CAaUZ,KAAD,IACLI,QAAQ,CAACL,iBAAiB,CAACC,KAAK,CAACa,QAAN,CAAeJ,IAAf,CAAoBK,MAArB,CAAlB,CAdZ;AAgBD,GAlBD;AAmBD,CApBD;;AAsBA,SAASZ,UAAT,EAAqBf,eAArB,EAAsCU,WAAtC","sourcesContent":["import axios from \"axios\";\r\nimport searchTypes from \"./Search.Types\";\r\n\r\nconst { REACT_APP_BASE_URL, REACT_APP_APIKEY } = process.env;\r\n\r\nconst changeSearchVal = (newQuery) => ({\r\n  type: searchTypes.CHANGE_SEARCH_VAL,\r\n  payload: newQuery,\r\n});\r\n\r\nconst sendSearchStart = () => ({\r\n  type: searchTypes.SEND_SEARCH_START,\r\n});\r\n\r\nconst sendSearchSuccess = (info) => ({\r\n  type: searchTypes.SEND_SEARCH_SUCCESS,\r\n  payload: info,\r\n});\r\nconst clearSearch = () => ({\r\n  type: searchTypes.SEND_SEARCH_CLEAR,\r\n});\r\nconst sendSearchFailure = (error) => ({\r\n  type: searchTypes.SEND_SEARCH_FAILED,\r\n  payload: error,\r\n});\r\n\r\nconst sendsearch = (question) => {\r\n  return (dispatch) => {\r\n    dispatch(sendSearchStart());\r\n    axios({\r\n      method: \"get\",\r\n      url: `\r\n       ${REACT_APP_BASE_URL}search/movie?api_key=${REACT_APP_APIKEY}&query=${question}`,\r\n    })\r\n      .then((resp) => {\r\n        dispatch(sendSearchSuccess(resp.data.message));\r\n        if (resp.data.status === 200) {\r\n          dispatch(sendSearchSuccess(resp.data.message));\r\n        } else {\r\n          dispatch(sendSearchFailure(resp.data));\r\n        }\r\n      })\r\n      .catch((error) =>\r\n        dispatch(sendSearchFailure(error.response.data.result))\r\n      );\r\n  };\r\n};\r\n\r\nexport { sendsearch, changeSearchVal, clearSearch };\r\n"]},"metadata":{},"sourceType":"module"}