{"ast":null,"code":"import axios from \"axios\";\nimport searchTypes from \"./Search.Types\";\nconst {\n  REACT_APP_BASE_URL,\n  REACT_APP_APIKEY\n} = process.env;\n\nconst changeSearchVal = newQuery => ({\n  type: searchTypes.CHANGE_SEARCH_VAL,\n  payload: newQuery\n});\n\nconst sendQuestionStart = () => ({\n  type: searchTypes.SEND_SEARCH_START\n});\n\nconst sendQuestionSuccess = info => ({\n  type: searchTypes.SEND_SEARCH_SUCCESS,\n  payload: info\n});\n\nconst sendQuestionFailure = error => ({\n  type: searchTypes.SEND_SEARCH_FAILED,\n  payload: error\n});\n\nconst sendsearch = question => {\n  return dispatch => {\n    dispatch(sendQuestionStart());\n    axios({\n      method: \"get\",\n      url: `${REACT_APP_BASE_URL}/search/movie?api_key=${REACT_APP_APIKEY}&query=${question}`\n    }).then(resp => {\n      console.log(resp);\n      dispatch(sendQuestionSuccess(resp.data.message));\n\n      if (resp.data.status === 200) {\n        dispatch(sendQuestionSuccess(resp.data.message));\n      } else {\n        dispatch(sendQuestionFailure(resp.data));\n      }\n    }).catch(error => dispatch(sendQuestionFailure(error.response.data.result)));\n  };\n};\n\nexport { sendsearch, changeSearchVal };","map":{"version":3,"sources":["C:/Users/App Corp/Desktop/CinemaApp/src/redux/Search/Search.Action.jsx"],"names":["axios","searchTypes","REACT_APP_BASE_URL","REACT_APP_APIKEY","process","env","changeSearchVal","newQuery","type","CHANGE_SEARCH_VAL","payload","sendQuestionStart","SEND_SEARCH_START","sendQuestionSuccess","info","SEND_SEARCH_SUCCESS","sendQuestionFailure","error","SEND_SEARCH_FAILED","sendsearch","question","dispatch","method","url","then","resp","console","log","data","message","status","catch","response","result"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAM;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,IAA2CC,OAAO,CAACC,GAAzD;;AAEA,MAAMC,eAAe,GAAIC,QAAD,KAAe;AACrCC,EAAAA,IAAI,EAAEP,WAAW,CAACQ,iBADmB;AAErCC,EAAAA,OAAO,EAAEH;AAF4B,CAAf,CAAxB;;AAKA,MAAMI,iBAAiB,GAAG,OAAO;AAC/BH,EAAAA,IAAI,EAAEP,WAAW,CAACW;AADa,CAAP,CAA1B;;AAIA,MAAMC,mBAAmB,GAAIC,IAAD,KAAW;AACrCN,EAAAA,IAAI,EAAEP,WAAW,CAACc,mBADmB;AAErCL,EAAAA,OAAO,EAAEI;AAF4B,CAAX,CAA5B;;AAKA,MAAME,mBAAmB,GAAIC,KAAD,KAAY;AACtCT,EAAAA,IAAI,EAAEP,WAAW,CAACiB,kBADoB;AAEtCR,EAAAA,OAAO,EAAEO;AAF6B,CAAZ,CAA5B;;AAKA,MAAME,UAAU,GAAIC,QAAD,IAAc;AAC/B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACV,iBAAiB,EAAlB,CAAR;AACAX,IAAAA,KAAK,CAAC;AACJsB,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAG,GAAErB,kBAAmB,yBAAwBC,gBAAiB,UAASiB,QAAS;AAFlF,KAAD,CAAL,CAIGI,IAJH,CAISC,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,QAAQ,CAACR,mBAAmB,CAACY,IAAI,CAACG,IAAL,CAAUC,OAAX,CAApB,CAAR;;AACA,UAAIJ,IAAI,CAACG,IAAL,CAAUE,MAAV,KAAqB,GAAzB,EAA8B;AAC5BT,QAAAA,QAAQ,CAACR,mBAAmB,CAACY,IAAI,CAACG,IAAL,CAAUC,OAAX,CAApB,CAAR;AACD,OAFD,MAEO;AACLR,QAAAA,QAAQ,CAACL,mBAAmB,CAACS,IAAI,CAACG,IAAN,CAApB,CAAR;AACD;AACF,KAZH,EAaGG,KAbH,CAaUd,KAAD,IACLI,QAAQ,CAACL,mBAAmB,CAACC,KAAK,CAACe,QAAN,CAAeJ,IAAf,CAAoBK,MAArB,CAApB,CAdZ;AAgBD,GAlBD;AAmBD,CApBD;;AAsBA,SAASd,UAAT,EAAqBb,eAArB","sourcesContent":["import axios from \"axios\";\r\nimport searchTypes from \"./Search.Types\";\r\n\r\nconst { REACT_APP_BASE_URL, REACT_APP_APIKEY } = process.env;\r\n\r\nconst changeSearchVal = (newQuery) => ({\r\n  type: searchTypes.CHANGE_SEARCH_VAL,\r\n  payload: newQuery,\r\n});\r\n\r\nconst sendQuestionStart = () => ({\r\n  type: searchTypes.SEND_SEARCH_START,\r\n});\r\n\r\nconst sendQuestionSuccess = (info) => ({\r\n  type: searchTypes.SEND_SEARCH_SUCCESS,\r\n  payload: info,\r\n});\r\n\r\nconst sendQuestionFailure = (error) => ({\r\n  type: searchTypes.SEND_SEARCH_FAILED,\r\n  payload: error,\r\n});\r\n\r\nconst sendsearch = (question) => {\r\n  return (dispatch) => {\r\n    dispatch(sendQuestionStart());\r\n    axios({\r\n      method: \"get\",\r\n      url: `${REACT_APP_BASE_URL}/search/movie?api_key=${REACT_APP_APIKEY}&query=${question}`,\r\n    })\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        dispatch(sendQuestionSuccess(resp.data.message));\r\n        if (resp.data.status === 200) {\r\n          dispatch(sendQuestionSuccess(resp.data.message));\r\n        } else {\r\n          dispatch(sendQuestionFailure(resp.data));\r\n        }\r\n      })\r\n      .catch((error) =>\r\n        dispatch(sendQuestionFailure(error.response.data.result))\r\n      );\r\n  };\r\n};\r\n\r\nexport { sendsearch, changeSearchVal };\r\n"]},"metadata":{},"sourceType":"module"}